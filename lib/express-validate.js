// Generated by CoffeeScript 1.9.2
var _, parser, validator, validatorWrapper;

_ = require('underscore');

validator = require('./validator');

parser = require('./parser');

validatorWrapper = function(opts) {
  var i, j, len, len1, p, ref, ref1, rule, validatorMiddleware;
  opts = opts || {};
  _.defaults(opts, {
    exposeMixedParams: false,
    rules: [],
    parsers: [],
    asJSON: true
  });
  ref = opts.rules;
  for (i = 0, len = ref.length; i < len; i++) {
    rule = ref[i];
    validator.addRule(rule.name, rule.rule);
  }
  ref1 = opts.parsers;
  for (j = 0, len1 = ref1.length; j < len1; j++) {
    p = ref1[j];
    parser.addParser(p.name, p.parser);
  }
  validatorMiddleware = function(req, res, next) {
    req.parse = function(ruleset) {
      req.files = parser.parse(req.files, ruleset);
      req.p = parser.parse(req.p, ruleset);
      req.query = parser.parse(req.query, ruleset);
      return req.body = parser.parse(req.body, ruleset);
    };
    req.defaults = function(defaults) {
      return req.p = _.defaults(req.p || {}, defaults);
    };
    req.validate = function(rules) {
      var b64, params, response, result;
      params = _.extend({}, req.p, req.files, req.params, req.query, req.body);
      if (opts.exposeMixedParams) {
        req.p = params;
      }
      result = validator.validate(params, rules);
      if (result.length === 0) {
        return true;
      }
      if (opts.asJSON) {
        response = {
          errors: result
        };
        if (req.query.post_message) {
          response.fromAPI = 1;
          b64 = new Buffer(JSON.stringify(response)).toString('base64');
          response = "<script>window.parent.postMessage('" + b64 + "','*')</script>";
        }
        res.status(400).send(response);
      } else {
        res.status(400).send(result.join('\n'));
      }
      return false;
    };
    return next();
  };
  return validatorMiddleware;
};

module.exports = validatorWrapper;
